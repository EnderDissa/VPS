plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	implementation 'org.liquibase:liquibase-core'

	implementation 'org.mapstruct:mapstruct:1.6.3'
	compileOnly 'org.projectlombok:lombok:1.18.40'
	annotationProcessor 'org.projectlombok:lombok:1.18.40'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	runtimeOnly 'org.postgresql:postgresql:42.7.7'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.4'
	testImplementation 'org.testcontainers:postgresql:1.20.4'
}

jacoco {
	toolVersion = "0.8.12"
}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
	testLogging {
		events "PASSED", "FAILED", "SKIPPED"
		exceptionFormat "full"
		showExceptions true
		showCauses true
		showStackTraces true
		showStandardStreams true
	}
	reports {
		html.required = true
		junitXml.required = true
	}
	finalizedBy tasks.jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		html.required = true
		xml.required = true
		csv.required = false
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.70
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
